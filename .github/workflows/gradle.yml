# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: chmod
      run: chmod 777 ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: docker image build
      run: docker build -t lkh8033/nextlevel .

    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nextlevel

    - name: ssh
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_KEY }}
        port: 22
        script: |

          echo "remove old container"
          docker stop container
          docker rm container
        
          echo "pull docker at ssh server"
          docker pull ${{ secrets.DOCKER_USERNAME}}/nextlevel:latest

          echo "start new container"
          docker run -d \
            --name container \
            -p 8080:8080 \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e GOOGLE_ID=${{ secrets.GOOGLE_ID }} \
            -e GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} \
            -e KAKAO_ID=${{ secrets.KAKAO_ID }} \
            -e KAKAO_SECRET=${{ secrets.KAKAO_SECRET }} \
            -e NAVER_ID=${{ secrets.NAVER_ID }} \
            -e NAVER_SECRET=${{ secrets.NAVER_SECRET }} \
            -e TOSS_CLIENT=${{ secrets.TOSS_CLIENT }} \
            -e TOSS_SECRET=${{ secrets.TOSS_SECRET }} \
            -e EMAIL=${{ secrets.EMAIL }} \
            -e EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
            -e SSL_TYPE=${{ secrets.SSL_TYPE }} \
            -e SSL_PASSWORD=${{ secrets.SSL_PASSWORD }} \
            ${{ secrets.DOCKER_USERNAME }}/nextlevel:latest
